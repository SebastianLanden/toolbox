#!/c/Users/SebbePC/AppData/Local/Microsoft/WindowsApps/python3
import argparse
import socket

def scan_ports(host="127.0.0.1", port_range=(1, 1024), protocol="tcp"):
    open_ports = []
    if protocol.lower() == "tcp":
        for port in range(port_range[0], port_range[1]+1):
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.settimeout(1)
                    result = s.connect_ex((host, port))
                    if result == 0:
                        open_ports.append(port)
            except Exception:
                pass
    elif protocol.lower() == "udp":
        for port in range(port_range[0], port_range[1]+1):
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
                    s.settimeout(1)
                    s.sendto(b'', (host, port))
                    s.recvfrom(1024)
                    open_ports.append(port)
            except socket.timeout:
                pass
            except Exception:
                pass
    return open_ports

def main():
    parser = argparse.ArgumentParser(description="Simple Port Scanner for Piping")
    parser.add_argument("-H", "--host", default="127.0.0.1", help="Host to scan, default is localhost")
    parser.add_argument("-p", "--port", default="1-1024", help="Port range to scan, default is 1-1024")
    parser.add_argument("-t", "--type", default="tcp", choices=["tcp", "udp"], help="Type of scan: tcp or udp, default is tcp")
    args = parser.parse_args()

    host = args.host
    port_range = tuple(map(int, args.port.split('-')))
    protocol = args.type

    if len(port_range) != 2 or port_range[0] >= port_range[1]:
        print("Invalid port range. Please use the format start-end (e.g., 20-80).", file=sys.stderr)
        return

    open_ports = scan_ports(host, port_range, protocol)
    for port in open_ports:
        print(port)

if __name__ == "__main__":
    main()
