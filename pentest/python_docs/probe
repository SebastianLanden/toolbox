#!/c/Users/SebbePC/AppData/Local/Microsoft/WindowsApps/python3
import nmap
import sys
import argparse
import re
import os


def is_valid_socket(socket):
    # Regular expression to validate IP:Port or localhost:Port
    pattern = re.compile(r"^(localhost|\d{1,3}(\.\d{1,3}){3}):\d+$")
    return pattern.match(socket)


def probe_socket(socket):
    if not is_valid_socket(socket):
        print(f"Invalid socket format: {socket}", file=sys.stderr)
        return

    nm = nmap.PortScanner()
    ip, port = socket.split(":")
    try:
        nm.scan(ip, port, arguments="-sV")  # -sV for service/version detection
        service_info = "No service detected or port is closed"
        for host in nm.all_hosts():
            for proto in nm[host].all_protocols():
                lport = list(nm[host][proto].keys())
                for port in lport:
                    state = nm[host][proto][port]['state']
                    if state == "open":
                        service = nm[host][proto][port].get('name', 'unknown service')
                        product = nm[host][proto][port].get('product', '')
                        version = nm[host][proto][port].get('version', '')
                        extra = nm[host][proto][port].get('extrainfo', '')
                        service_info = f"{service} {product} {version} {extra}".strip()
                    else:
                        service_info = "Port is closed"
        print(f"{ip}:{port} - {service_info}")
    except Exception as e:
        print(f"Error scanning {socket}: {e}", file=sys.stderr)


def main():
    parser = argparse.ArgumentParser(description="Probe sockets to identify listening services")
    parser.add_argument("-s", "--socket", nargs="?", help="Single socket to probe in format IP:Port or localhost:Port")
    args = parser.parse_args()

    if args.socket:
        probe_socket(args.socket)
    elif not os.isatty(sys.stdin.fileno()):
        # Handling piped input
        for line in sys.stdin:
            socket = line.strip()
            if socket and is_valid_socket(socket):
                probe_socket(socket)
    else:
        print("No valid socket provided and not receiving piped input. Exiting.", file=sys.stderr)


if __name__ == "__main__":
    main()
